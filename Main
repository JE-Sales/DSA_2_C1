
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {

	public static void main(String[] args) throws IOException, InterruptedException {
		/*
		 * Declaration and initialization of objects and variables that will be used in
		 * this program. HashTable will be utilized as the data structure for storing
		 * the data that will be inserted in the program. BufferedReader on the other
		 * hand is a method that will be used to get the data that the users will
		 * insert. Lastly, option and key variables holds the integer value that will
		 * decide what operations will be executed and the integer value that will be
		 * inserted, searched or deleted in the featured data structure respectively.
		 */

		HashTable hashtable = new HashTable();
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		int option, key;

		/*
		 * A loop that serves as the menu for the program and will run endlessly until
		 * the user decides to terminate the program. This loop contains a switch case
		 * that determines what operation will be executed after a certain integer is
		 * inserted. The first case adds a new key to the HashTable. The second case
		 * displays the HashTable by calling the "view" method of the HashTable. The
		 * third case searches the entered key by the user on the HashTable. The fourth
		 * case deletes the desired key of the user if and only if the key is existing
		 * in the HashTable. The last case which is the fifth case does a simple job of
		 * terminating the program. This loop contains many filters for the value that
		 * will be inserted into it. The first filter is that it will only take integer
		 * values from number one to five for selecting the operations which means that
		 * other numbers and characters will not be accepted. The second filter is for
		 * the first to the third case where it Checks the entered number, if the number
		 * is less than 0 and/or not a whole number, an error message will be displayed
		 * and the user will be returned to the Menu.
		 */
		System.out.println("---HASH TABLE---");
		while (true) {

			try {
				System.out.println("\n1. Add New Key");
				System.out.println("2. Display Hash Table");
				System.out.println("3. Search");
				System.out.println("4. Delete");
				System.out.println("5. Exit");
				System.out.print("Enter Option Number: ");

				option = Integer.parseInt(reader.readLine());

				if (option < 1 || option > 5) {
					throw new NumberFormatException();
				}

				switch (option) {

				case 1:
					System.out.println("\n--Add New Key--");
					System.out.print("Enter New Key: ");

					try {
						key = Integer.parseInt(reader.readLine());

						if (key < 0) {
							System.out.println("Only Enter WHOLE NUMBERS!\nPlease try again.");
						} else {
							hashtable.add(key);
						}
					} catch (NumberFormatException e) {
						System.out.println("The only allowed inputs are WHOLE NUMBERS!\nPlease try again.");

					}

					break;

				case 2:
					System.out.println("\n--Display Hash Table--");
					hashtable.view();

					break;

				case 3:
					try {
						System.out.println("\n--Search Key--");
						System.out.print("Enter Key to Search: ");
						key = Integer.parseInt(reader.readLine());
						hashtable.search(key);
					} catch (NumberFormatException e) {
						System.out.println("The only allowed inputs are WHOLE NUMBERS!\nPlease try again.");
					} catch (ArrayIndexOutOfBoundsException e) {
						System.out.println(
								"The only allowed inputs are WHOLE NUMBERS, no Negative Integer!\nPlease try again.");
					}

					break;

				case 4:
					try {
						System.out.println("\n--Delete Key--");
						System.out.print("Enter Key to Delete: ");
						key = Integer.parseInt(reader.readLine());
						hashtable.delete(key);
					} catch (NumberFormatException e) {
						System.out.println("The only allowed inputs are WHOLE NUMBERS!\nPlease try again.");
					} catch (ArrayIndexOutOfBoundsException e) {
						System.out.println(
								"The only allowed inputs are WHOLE NUMBERS, no Negative Integer!\nPlease try again.");
					}

					break;

				case 5:
					System.out.print("\n--Exit--" + "\nProgram will be terminated");

					for (int i = 0; i < 3; i++) {
						Thread.sleep(1000);
						System.out.print(".");
					}
					System.out.print("\nProgram terminated.");
					System.exit(0);
				}
			}

			catch (NumberFormatException e) {
				System.out.println("Option number must be selected from WHOLE NUMBERS 1-5!\nPlease try again.");
			}
		}
	}
}
