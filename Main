
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {

	public static void main(String[] args) throws IOException, InterruptedException {
		// Local objects and variables.
		HashTable hashtable = new HashTable();
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		int option, key;

		// An infinite loop that will endlessly display the Menu unless terminated.
		System.out.println("---HASH TABLE---");
		while (true) {
		
			try {
				System.out.println("\n1. Add New Key");
				System.out.println("2. Display Hash Table");
				System.out.println("3. Search");
				System.out.println("4. Delete");
				System.out.println("5. Exit");
				System.out.print("Enter Option Number: ");
				
				option = Integer.parseInt(reader.readLine());
				 
				/*
				 *  Checks the entered number, if the number is less than 1 OR greater than 5, an error 
				 *  message will be displayed and the user will be returned to the Menu.
				 */ 
				if (option < 1 || option > 5) {
					throw new NumberFormatException();
				}
				
				switch (option) {
				
				// Adds a new Key on the HashTable.
				case 1: 
					System.out.println("\n--Add New Key--");
					System.out.print("Enter New Key: ");
					
					/*
					 *  Checks the entered number, if the number is less than 0 and/or not a whole 
					 *  number, an error message will be displayed and the user will be  returned to the Menu. 
					 *  But if the entered number is greater than zero and/or a whole number, the key
					 *  or the entered number will be passed through as a parameter on the called "add" 
					 *  method of the Hash Table.
					 */
					try {	
						key = Integer.parseInt(reader.readLine());
			
						if(key <0) {
							System.out.println("Only Enter WHOLE NUMBERS!\nPlease try again.");
						}else {
							hashtable.add(key);
						}
					} catch (NumberFormatException e) {
						System.out.println("The only allowed inputs are WHOLE NUMBERS!\nPlease try again.");
						
					}
					
					break;
					
					// Displays the HashTable by calling the "view" method of the HashTable.
					case 2:
						System.out.println("\n--Display Hash Table--");
						hashtable.view();
						
						break;
					
					// Searches the entered key by the user on the HashTable.
					case 3:
					        /*
					         *  If the entered number or key is not a whole number and/or a positive integer,
						 *  an error message will be displayed and the user will be returned to the Menu.
						 *  Else, the "search" method of the HashTable will be called and the entered number 
						 *  or key will be passed through as a parameter.
						 */
						try {
							System.out.println("\n--Search Key--");
							System.out.print("Enter Key to Search: ");
							key = Integer.parseInt(reader.readLine());
							hashtable.search(key);
						} catch (NumberFormatException e) {
							System.out.println("The only allowed inputs are WHOLE NUMBERS!\nPlease try again.");
						} catch (ArrayIndexOutOfBoundsException e) {
							System.out.println("The only allowed inputs are WHOLE NUMBERS, no Negative Integer!\nPlease try again.");		
						}
						
						break;
						
					// Deletes the entered key by the user on the HashTable.
					case 4:
							try {
								System.out.println("\n--Delete Key--");
								System.out.print("Enter Key to Delete: ");
								key = Integer.parseInt(reader.readLine());
								hashtable.delete(key);
						} catch (NumberFormatException e) {
								System.out.println("The only allowed inputs are WHOLE NUMBERS!\nPlease try again.");
						} catch (ArrayIndexOutOfBoundsException e) {
								System.out.println("The only allowed inputs are WHOLE NUMBERS, no Negative Integer!\nPlease try again.");
						}
							
						break;
						
					// Exits the program.
					case 5:
						System.out.print("\n--Exit--"+ "\nProgram will be terminated");	
						
							// A 3-second timer that will be visibly showed before terminating the program.
							for (int i = 0; i < 3; i++) {
								Thread.sleep(1000);
									System.out.print(".");		
								}
								System.out.print("\nProgram terminated.");
								System.exit(0);}
				}
				// An error message that will be displayed if the user entered a number except numbers 1-5 only.
				catch (NumberFormatException e) {
					System.out.println("Option number must be selected from WHOLE NUMBERS 1-5!\nPlease try again.");
			}
		}
	}
}

			
			
			
