
public class HashTable {
	private int[] arr = new int[20];

	// Add New Key
	public void add(int key) {
		// Hash
		int index = hash(key), pointer = (index + 1);
		System.out.println("Original Index: " + index);

		// Linear Probing
		if (arr[index] != 0) {

			while (true) {
				if (arr[pointer] == 0) {
					index = pointer;
					System.out.println("New Index: " + index + "\n");
					arr[index] = key;
					System.out.println("New key added successfully!");
					break;
				}

				pointer = pointer != (arr.length - 1) ? pointer + 1 : 0;

				if (pointer == index) {
					System.out.println("The hash table is full! Add New Key unsuccessful.");
					break;
				}
			}

		} else {
			arr[index] = key;
			System.out.println("New key added successfully!");
		}

	}

	// Display Hash Table
	public void view() {
		for (int i = 0; i < arr.length; i++)
			System.out.println("Index : " + i + " Key : " + arr[i]);

	}

	// Search Key Index
	public void search(int key) {
		int index = hash(key), pointer = (index + 1);

		if (arr[index] != key) {
			while (true) {
				if (arr[pointer] == key) {
					index = pointer;
					System.out.println(" Index : " + index + "Key : " + key);
					break;
				}

				pointer = pointer != (arr.length - 1) ? pointer + 1 : 0;

				if (pointer == index) {
					System.out.println("The key is non-existent in the hashtable.");
					break;
				}
			}
		} else {
			System.out.println("Key : " + key + " Index : " + index);
		}
	}

	// Delete Key
	public void delete(int key) {
		int index = hash(key), pointer = (index + 1);

		if (arr[index] != key) {
			while (true) {
				if (arr[pointer] == key) {
					index = pointer;
					arr[index] = 0;
					System.out.println("Key deleted successfully!");
					break;
				}

				pointer = pointer != (arr.length - 1) ? pointer + 1 : 0;

				if (pointer == index) {
					System.out.println("The key is non-existent in the hashtable.");
					break;
				}
			}
		} else {
			arr[index] = 0;
			System.out.println("Key deleted successfully!");
		}
	}

	//For Hashing
	private static int hash(int key) {
		return (key % 20);
	}
}
