
public class HashTable {
	private int[] arr = new int[20];

	// Add New Key
	public void add(int key) {
		int hash = HashFunction(key);
		int probingIndex = (hash + 1);
		System.out.println("Original Index: " + hash);

		// Linear Probing
		if (arr[hash] != 0) {

			while (true) {
				if (arr[probingIndex] == 0) {
					hash = probingIndex;
					System.out.println("New Index: " + hash + "\n");
					arr[hash] = key;
					System.out.println("New key added successfully!");
					break;
				}

				probingIndex = probingIndex != (arr.length - 1) ? probingIndex + 1 : 0;

				if (probingIndex == hash) {
					System.out.println("The hash table is full! Add New Key unsuccessful.");
					break;
				}
			}

		} else {
			arr[hash] = key;
			System.out.println("New key added successfully!");
		}

	}

	// Display Hash Table
	public void view() {
		for (int i = 0; i < arr.length; i++)
			System.out.println("Index : " + i + " Key : " + arr[i]);

	}

	// Search Key Index
	public void search(int key) {
		int hash = HashFunction(key);
		int probingIndex = (hash + 1);
		if (arr[hash] != key) {
			while (true) {
				if (arr[probingIndex] == key) {
					hash = probingIndex;
					System.out.println(" Index : " + hash + "Key : " + key);
					break;
				}

				probingIndex = probingIndex != (arr.length - 1) ? probingIndex + 1 : 0;

				if (probingIndex == hash) {
					System.out.println("The key is non-existent in the hashtable.");
					break;
				}
			}
		} else {
			System.out.println("Key : " + key + " Index : " + hash);
		}
	}

	// Delete Key
	public void delete(int key) {
		int hash = HashFunction(key);
		int probingIndex = (hash + 1);
		if (arr[hash] != key) {
			while (true) {
				if (arr[probingIndex] == key) {
					hash = probingIndex;
					arr[hash] = 0;
					System.out.println("Key deleted successfully!");
					break;
				}

				probingIndex = probingIndex != (arr.length - 1) ? probingIndex + 1 : 0;

				if (probingIndex == hash) {
					System.out.println("The key is non-existent in the hashtable.");
					break;
				}
			}
		} else {
			arr[hash] = 0;
			System.out.println("Key deleted successfully!");
		}
	}

	//For Hashing
	private static int HashFunction(int key) {
		int hash = key % 20;
		return hash;
	}
}
